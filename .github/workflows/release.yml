name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Clear Git cache
        run: |
          rm -rf ${{ github.workspace }}/.git
          
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Set permissions for deploy.sh
        run: chmod +x ./scripts/deploy.sh

      - name: Mostrar contexto completo
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(JSON.stringify(context, null, 2));

      - name: Run Semantic Release
        uses: titan85/semanticPlugin@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository_url: ${{ github.repository }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Reorder changelog
        run: python3 scripts/reorder-changelog.py

      - name: Commit and push reordered changelog
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "chore: reorder CHANGELOG.md"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Obtener la última versión con BREAKING CHANGES
        run: |
          version_found=""
          breaking_found=false
          
          while IFS= read -r line; do
              if [[ $line =~ ^#\ \[([0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
                  if $breaking_found; then
                      break
                  fi
                  version_found="$line"
              fi
              
              if [[ $line =~ ^###\ BREAKING\ CHANGES ]]; then
                  breaking_found=true
              fi
          done < CHANGELOG.md
          
          if [[ -n "$version_found" ]]; then
              version_tag=$(echo "$version_found" | grep -oP "\d+\.\d+\.\d+")
              version_date=$(echo "$version_found" | grep -oP "\(\d{4}-\d{2}-\d{2}\)")
              repo_url="https://github.com/${GITHUB_REPOSITORY}"
              tag_url="$repo_url/tree/v$version_tag"
              echo -e "CURRENT_VERSION_SECTION=\"# Current version\n## [$version_tag]($tag_url) $version_date\n\"" >> $GITHUB_ENV
          else
              echo "No se encontró una versión con 'BREAKING CHANGES' o versión válida en el changelog."
          fi

      # Paso para actualizar el README.md con la sección actualizada de Current Version
      - name: Update README with Current Version
        run: |
          current_version_section="${CURRENT_VERSION_SECTION}"
          readme_content=$(cat README.md)
          echo -e "$current_version_section\n\n$readme_content" > README.md
        env:
          CURRENT_VERSION_SECTION: ${{ env.CURRENT_VERSION_SECTION }}

      - name: Commit README update
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git commit -m "docs: update README with current version"
          git push
      